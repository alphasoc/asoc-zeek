#!/usr/bin/env bash

# ----------------------------------------------------------------------------------------
# asoc-zeek
#
# Automates Zeek configuration and startup for use with AlphaSOC Analytics Engine and
# Console (https://docs.alphasoc.com/ae/architecture/).
# ----------------------------------------------------------------------------------------

set -e

# Globals
# ----------------------------------------------------------------------------------------
scriptname=$(basename $0)
os=$(uname -s)
zeekcmd=zeek
capcmd=capstats
sshcmd=ssh
default_workdir="$HOME/.asoc/zeek"
# SFTP host is set based on --staging.
sftp_host=""
sftp_port="2222"
workdir=""
org_id=""
intf=""
quiet=false
staging=false
zeek_status_filename=".status"
# $workdir/$zeek_status_filename once workdir is determined.
zeek_status_file=""
rc_ok=0
rc_err=1

usage_msg="Zeek for AlphaSOC

NOTE: If this is your first time running this script, run: $scriptname --man

usage: $scriptname -i <INTF> -o <ORGANIZATION_ID> [-h -m -q -s -w <WORK_DIR>]

Mandatory arguments:
  -i|--intf <INTF>
  -o|--org <ORGANIZATION_ID>

Optional arguments:
  -h|--help
  -m|--man
  -q|--quiet
  -s|--staging (developers only, see 'Developers' section in: $scriptname --man)
  -w|--work <WORK_DIR> (default: $default_workdir)
"

manual_msg="Zeek for AlphaSOC

Introduction:

$scriptname automates Zeek configuration and execution.  $scriptname is meant to be used
alongside AlphaSOC's threat simulation tool, Network Flight Simulator (which can be found
at https://github.com/alphasoc/flightsim), to showcase the various threats that can be
detected and displayed via the AlphaSOC Console.

In order to make full use of this script, an AlphaSOC account is needed to get started.
If you don't have an account, please visit https://alphasoc.com/demo/ and register for one.
The registration will grant you a FREE 30 day demo of AlphaSOC services.  You'll receive an
email with a verification link and an Organization ID.  Be sure to verify the account
before continuing.

Once you have an account, please visit https://console.alphasoc.net and sign in with your
credentials.  Your Organization ID (also known as a Workspace ID) will be found at the top
of https://console.alphasoc.net/credentials.  Copy it to your clipboard for later use.


SSH/Authentication:

Zeek will be configured to use SFTP (with SSH-key authentication) in order to upload
telemetry to AlphaSOC.  Thus, you will want to generate an SSH-key pair (without a
passhphrase, unless you wish to take the necessary steps to use something like ssh-agent)
and upload the public key to the 'Credentials' page (https://console.alphasoc.net/credentials)
using the SSH Keys dialog.  Ensure that the private key is kept in a readable location on
the system from which you will run $scriptname, and also ensure that it will be used when
communicating with AlphaSOC. This can be done by modifying ~/.ssh/config and adding the
following:

Host sftp.alphasoc.net
  HostName sftp.alphasoc.net
  IdentityFile /path/to/SSH-keys/your-key-file

NOTE: Because Zeek captures packets from a given interface, $scriptname must be run by a
user account with the appropriate permissions.  On Linux systems with kernels supporting
capability bits (ie. CAP_NET_RAW), this can be a regular user account.  $scriptname
will automatically set the correct capability bits for the necessary Zeek binaries.
On BSD systems or Linux systems without capability bit support, it will be easiest to run
$scriptname as root or via sudo.  In such cases, for simplicity, the generated SSH keys and
modified config should reside in roots home directory (ie. /root/.ssh).  On OSX, you would
use sudo, but the SSH keys and config would remain in your home directory.  Lastly, BSD
systems (including OSX) can be configured to allow a non-root user to access the packet
capture device (/dev/bpf) thus allowing them to run programs such as Zeek.  This is done
by adding the desired user to a group which has been given access to /dev/bpf.  Exact
instructions on how to do this are beyond the scope of this guide, but are readily
available online.


Installing Zeek:

$scriptname has been tested with Zeek version 4.1.1.  To install Zeek, visit
https://zeek.org/get-zeek/, and follow the instructions for your system.  Once installed,
make sure to add the installation destination to your user path.  Again, this will be
the user that will run $scriptname.  For example, if Zeek has been installed to
/opt/zeek/bin add the path via:

$ export PATH=\$PATH:/opt/zeek/bin

You may also add this to your shell's startup script.

Now you should be all set.


Usage:

$scriptname -i <INTF> -o <ORGANIZATION_ID> [-h -m -q -s -w <WORK_DIR>]

Mandatory Command Line Arguments:
  -i|--intf <INTF>
    INTF is the network interface from which Zeek will capture packets and process network
    telemetry.
  -o|--org <ORGANIZATION_ID>
    ORGANIZATION_ID is the Workspace ID obtained when registering with AlphSOC, and is used
    during authentication.

Optional Command Line Arguments:
  -h|--help
    Displays a brief help message with usage instructions.
  -m|--man
    Displays this message.
  -q|--quiet
    Supresses script output.
  -s|--staging
    Configure $scriptname for use with the development/staging variant of AlphaSOC services.
    See the 'Developers' section below.
  -w|--work <WORK_DIR>
    WORK_DIR is an optional argument which can be used to specify the directory in which
    Zeek will run and deposit logs.  The generated Zeek config is also placed inside this
    directory along with stderr.log and stdout.log log files.  The default work directory is
    $default_workdir.


Troubleshooting:

1. unable to authenticate ORGANIZATION_ID@sftp.alphasoc.net on port 2222, check SSH settings
   unable to authenticate ORGANIZATION_ID@sftp.staging.alphasoc.net on port 2222, check SSH settings
This message is the result of a failed connectivity test with the AlphaSOC SFTP server.
First, make sure that your ORGANIZATION_ID matches the 'Workspace ID' in the 'Credentials'
pane of the AlphaSOC Console.  Next, ensure that you have generated and uploaded a valid SSH
public key to the AlphaSOC Console.  Finally, ensure that this key is being used by SSH in order to
authenticate.  Refer to the 'SSH/Authentication' section.

2. pcap_error: socket: Operation not permitted (pcap_activate)
   pcap_error: (cannot open device) /dev/bpf: Permission denied (pcap_activate)
Invalid permissions for the packet capture device are indicated by these types of
messages.  You may need to run $scriptname as root.  Refer to the 'NOTE' at the bottom of
the 'SSH/Authentication' section.


Developers:

If you're a developer using the development/staging variant of AlphaSOC services, be sure
to run $scriptname with the '-s' switch.  This will use staging variants of AlphaSOC SFTP
servers, and imply use of the staging Console.  All instances of alphasoc.net should be
replaced with staging.alphasoc.net.
"

# Utility Functions
# ----------------------------------------------------------------------------------------

# print prints msg if quiet has not been set by the user.
print() {
    msg=$1
    ! $quiet && printf "$msg" || return $rc_ok
}

# Determines if cmd in the user's path.
cmd_in_path() {
    local cmd=$1
    command -v "$cmd" &>/dev/null && return $rc_ok || return $rc_err
}

# running returns rc_ok if a PID is running, rc_err if it isn't.
running() {
    local pid=$1
    kill -0 $pid &>/dev/null && return $rc_ok || return $rc_err
}

# Simple connectivity test to ensure auth works.
test_sftp_auth() {
    local out=$(ssh -p $sftp_port "$org_id@$sftp_host" 2>&1)
    [[ "$out" =~ publickey ]] && return $rc_err || return $rc_ok
}

# Set file capabilities for Zeek binaries to use raw sockets.
linux_setcaps() {
    local rc=$rc_ok
    for cmd in "$zeekcmd" "$capcmd"; do
        ! sudo setcap cap_net_raw=eip $(which "$cmd") &>/dev/null && rc=$rc_err
    done
    return $rc
}

quit() {
    local rc=$1
    # Kill zeek if it's running.  Yes, there's a small window of opportunity for the pid
    # to be re-used.
    if [[ -n $zeek_pid ]]; then
        local tries=0
        while running $zeek_pid && [[ $tries -lt 5 ]]; do
            print "killing zeek ($zeek_pid)\n"
            kill $zeek_pid &>/dev/null || true
            sleep 1
            tries=$(($tries + 1))
        done
        # kill -9 at this point.
        if running $zeek_pid && [[ $tries == 5 ]]; then
            kill -9 $zeek_pid &>/dev/null || true
            sleep 1
            # Zeek still running?  Abort.
            if running $zeek_pid; then
                print "error: failed killing zeek ($zeek_pid), aborting\n"
                exit $rc_err
            fi
        fi
    fi
    print "cleaning up\n"
    if ! cleanup; then
        exit $rc_err
    fi
    [[ -n $rc ]] && exit $rc || exit $rc_ok
}

# Runs zeek cleanup routines on exit, and only when a zeek status file is found, signalling
# that zeek actually ran.
cleanup() {
    if ! delete_logs; then
        print "error: failed deleting zeek log files\n"
        return $rc_err
    fi
    return $rc_ok
}

# Removes all the zeek-specific logs and the zeek status file from the working
# dir.  stdout.log, stderr.log and the zeek status file are left alone for possible debug
# purposes.
delete_logs() {
    local rc=$rc_ok
    for f in "$workdir"/*.log "$zeek_status_file"; do
        [[ ! -e "$f" ]] && continue
        if [[ "$f" =~ std(err|out)\.log ]]; then
            : # leave them alone
        else
            # Don't redirect output in case input is needed (ie. "remove write-protected").
            if ! rm "$f"; then
                rc=$rc_err
            fi
        fi
    done
    return $rc
}

# Pre-flight checks verifying that the script has what it needs to run.
check_preflights() {
    # Check mandatory arguments.
    if [[ -z "$org_id" ]] || [[ -z "$intf" ]]; then
        print "\nerror: mandatory arguments not supplied; see $scriptname --help\n"
        return $rc_err
    fi
    # Check zeek installed and in path.
    if ! cmd_in_path "$zeekcmd" || ! cmd_in_path "$capcmd"; then
        print "\nerror: zeek binaries not found in PATH\n"
        return $rc_err
    fi
    # Check that ssh is installed and in path.
    if ! cmd_in_path "$sshcmd"; then
        print "\nerror: $sshcmd not found in PATH\n"
        return $rc_err
    fi
    if ! test_sftp_auth; then
        print "\nerror: unable to authenticate $org_id@$sftp_host on port $sftp_port, check SSH settings\n"
        return $rc_err
    fi
    return $rc_ok
}

# Print the status string deposited by zeek in $zeek_status_file, or UNKNOWN.
zeek_status() {
    [[ -e "$zeek_status_file" ]] && cat "$zeek_status_file" || echo "UNKNOWN"
}

# Generates a zeek from user supplied parameters.  The configuration nstructs zeek to push
# IP, DNS, HTTP and SSL/TLS logs to AlphaSOC for analysis.
dump_zeek_config() {
    local username=$1
    printf "module SSL;
export {
    redef record Info += {
        cert_hash: string &log &optional;
    };
}
hook ssl_finishing(c: connection) &priority=5
    {
    if ( c\$ssl?\$cert_chain && |c\$ssl\$cert_chain| > 0 && c\$ssl\$cert_chain[0]?\$x509 )
        {
        c\$ssl\$cert_hash = c\$ssl\$cert_chain[0]\$sha1;
        }
    }

event zeek_init()
{
    Log::add_filter(Conn::LOG, [\$name=\"log-conn\", \$path=\"conn_logs\", \$writer=Log::WRITER_ASCII,
           \$interv=30sec, \$postprocessor=Log::sftp_postprocessor]);
    Log::sftp_destinations[Log::WRITER_ASCII,\"conn_logs\"] = set([\$user=\"$username\",\$host=\"$sftp_host\",\$host_port=$sftp_port,\$path=\"conn_logs_path\"]);

    Log::add_filter(DNS::LOG, [\$name=\"log-dns\", \$path=\"dns_logs\", \$writer=Log::WRITER_ASCII,
           \$interv=30sec, \$postprocessor=Log::sftp_postprocessor]);
    Log::sftp_destinations[Log::WRITER_ASCII,\"dns_logs\"] = set([\$user=\"$username\",\$host=\"$sftp_host\",\$host_port=$sftp_port,\$path=\"dns_logs_path\"]);

    Log::add_filter(HTTP::LOG, [\$name=\"log-http\", \$path=\"http_logs\", \$writer=Log::WRITER_ASCII,
           \$interv=30sec, \$postprocessor=Log::sftp_postprocessor]);
    Log::sftp_destinations[Log::WRITER_ASCII,\"http_logs\"] = set([\$user=\"$username\",\$host=\"$sftp_host\",\$host_port=$sftp_port,\$path=\"http_logs_path\"]);

    Log::add_filter(SSL::LOG, [\$name=\"log-ssl\", \$path=\"ssl_logs\", \$writer=Log::WRITER_ASCII,
           \$interv=30sec, \$postprocessor=Log::sftp_postprocessor]);
    Log::sftp_destinations[Log::WRITER_ASCII,\"ssl_logs\"] = set([\$user=\"$username\",\$host=\"$sftp_host\",\$host_port=$sftp_port,\$path=\"ssl_logs_path\"]);
}
"
}

# main
# ----------------------------------------------------------------------------------------

# trap ctrl-c and sigterm.
trap quit INT TERM

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            print "$usage_msg"
            exit $rc_ok
            ;;
        -i|--intf)
            intf="$2"
            shift
            ;;
        -m|--man)
            print "$manual_msg"
            exit $rc_ok
            ;;
        -o|--org)
            org_id="$2"
            shift
            ;;
        -q|--quiet)
            quiet=true
            ;;
        -s|--staging)
            staging=true
            ;;
        -w|--workdir)
            workdir="$2"
            shift
            ;;
        *) print "Unknown parameter: $1\n\n"
           print "$usage_msg"
           exit $rc_err
    esac
    shift
done

print "~~~~~~~~~~~~~~~~~~~~~~~~~\n"
print "~~~ Zeek for AlphaSOC ~~~\n"
print "~~~~~~~~~~~~~~~~~~~~~~~~~\n\n"

# Set workdir to default if not specified.
if [[ -z "$workdir" ]]; then
    workdir=$default_workdir
fi
# Check that workdir exists, otherwise create it.
if [[ ! -d "$workdir" ]]; then
    if ! mkdir -p "$workdir"; then
        print "error: failed creating $workdir\n"
        quit $rc_err
    fi
fi
# Get full path of workdir and zeek_status_file, now that workdir exists.
workdir=$(cd "$workdir"; pwd)
zeek_status_file="$workdir/$zeek_status_filename"

# Set sftp host.
$staging && sftp_host="sftp.staging.alphasoc.net" || sftp_host="sftp.alphasoc.net"

# Preflights.
print "running preflight checks\n"
if ! check_preflights; then
    quit $rc_err
fi

# Some info for the user.
print "organization id: $org_id\n"
print "interface: $intf\n"
print "workdir: $workdir\n"
print "SFTP server: $sftp_host\n"
print "AlphaSOC Console: "
if $staging; then
    print "https://console.staging.alphasoc.net\n"
else
    print "https://console.alphasoc.net\n"
fi
print "\n"

# Set network caps.
if [[ "$os" == "Linux" ]] && [[ "$EUID" -ne 0 ]]; then
    print "setting capabilities for zeek binaries\n"
    if ! linux_setcaps; then
        print "error: failed setting capabilities; $scriptname must be run as root; refer to $scriptname --man\n"
        quit $rc_err
    fi
fi

# Generate the config.
config_file="$workdir/$org_id.zeek"
print "writing zeek config to $config_file\n"
if ! dump_zeek_config "$org_id" > "$config_file"; then
    print "error: failed writing config\n"
    quit $rc_err
fi
print "zeek log files (including stdout.log and stderr.log) will be written to $workdir\n"

# Change to workdir and run.
cd "$workdir"
print "\nstarting zeek on interface $intf\n"

zeek -i "$intf" -p "$workdir" -U "$zeek_status_filename" "$org_id.zeek" > stdout.log 2> stderr.log &
zeek_pid=$!
print "CTRL-C to quit\n"
if ! wait $zeek_pid; then
    zeek_exit_status=$(zeek_status)
    print "\nerror: zeek exited with status: $zeek_exit_status\n"
    print "check $workdir/stderr.log and $workdir/stdout.log for errors\n"
    print "refer to the \"Troubleshooting\" section in: $scriptname --man\n"
    quit $rc_err
fi
